const axios = require('axios');

module.exports = {
  name: 'aidetect',
  description: 'D√©tecte si un texte est g√©n√©r√© par une IA via l\'API AI Detector.',
  author: 'Kaiz API Integration',

  async execute(senderId, args, pageAccessToken, sendMessage) {
    const prompt = args.join(' ');

    // V√©rifier si un texte valide est fourni
    if (!prompt) {
      return sendMessage(
        senderId,
        { text: "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n‚ú®AI Detect\nüëã Merci de me choisir pour v√©rifier vos textes ! üß†\nVeuillez fournir un texte pour analyse.\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ." },
        pageAccessToken
      );
    }

    try {
      // Construire l'URL pour appeler l'API aidetector-v2
      const apiUrl = `https://kaiz-apis.gleeze.com/api/aidetector-v2?q=${encodeURIComponent(prompt)}`;

      // Informer l'utilisateur que l'analyse est en cours
      await sendMessage(
        senderId,
        { text: 'üß† Analyse de votre texte en cours‚è≥...\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ' },
        pageAccessToken
      );

      // Appel √† l'API aidetector-v2
      const response = await axios.get(apiUrl);

      // V√©rifier si la r√©ponse est valide
      const result = response.data?.result || "D√©sol√©, je n'ai pas pu obtenir une r√©ponse valide.";
      const score = response.data?.score !== undefined ? ` (Score : ${response.data.score}%)` : '';

      // Obtenir la date et l'heure actuelle de Madagascar
      const madagascarTime = getMadagascarTime();

      // Formater la r√©ponse finale
      const formattedResponse = `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
                                `‚ú®AI Detect\n\nR√©sultat : ${result}${score}\n` +
                                `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
                                `üïí ${madagascarTime}`;

      // G√©rer les r√©ponses longues (d√©couper en morceaux si n√©cessaire)
      const maxMessageLength = 2000;
      if (formattedResponse.length > maxMessageLength) {
        const messages = splitMessageIntoChunks(formattedResponse, maxMessageLength);
        for (const message of messages) {
          await sendMessage(senderId, { text: message }, pageAccessToken);
        }
      } else {
        await sendMessage(senderId, { text: formattedResponse }, pageAccessToken);
      }
    } catch (error) {
      console.error('Erreur lors de l\'appel √† l\'API AI Detector :', error);

      // Envoyer un message d'erreur si l'appel API √©choue
      await sendMessage(
        senderId,
        { text: '‚ùå Une erreur est survenue. Veuillez r√©essayer plus tard.' },
        pageAccessToken
      );
    }
  }
};

// Fonction pour obtenir l'heure et la date de Madagascar
function getMadagascarTime() {
  const options = { timeZone: 'Indian/Antananarivo', hour12: false };
  const madagascarDate = new Date().toLocaleString('fr-FR', {
    ...options,
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
  });
  return madagascarDate; // Exemple : "vendredi 13 d√©cembre 2024, 16:30:45"
}

// Fonction utilitaire pour d√©couper un message en morceaux
function splitMessageIntoChunks(message, chunkSize) {
  const chunks = [];
  for (let i = 0; i < message.length; i += chunkSize) {
    chunks.push(message.slice(i, i + chunkSize));
  }
  return chunks;
}
