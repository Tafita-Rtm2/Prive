const axios = require('axios');
const fs = require('fs');
const path = require('path');
const FormData = require('form-data');

module.exports = {
  name: 'image-gen-flux',
  description: 'G√©n√®re une image via l\'API Flux et l\'envoie dans Messenger.',
  
  async execute(senderId, args, pageAccessToken, sendMessage) {
    const prompt = args.join(' '); // R√©cup√©ration de la description entr√©e par l'utilisateur

    if (!prompt || prompt.trim().length === 0) {
      return sendMessage(senderId, {
        text: "Bienvenue ! üëã Veuillez fournir une description pour g√©n√©rer une image. üñºÔ∏è‚ú®"
      }, pageAccessToken);
    }

    try {
      // Informer l'utilisateur que le processus est lanc√©
      await sendMessage(senderId, {
        text: "‚ú® G√©n√©ration de votre image en cours... ‚è≥"
      }, pageAccessToken);

      // Appel √† l'API Flux pour g√©n√©rer l'image
      const apiUrl = `https://kaiz-apis.gleeze.com/api/flux?prompt=${encodeURIComponent(prompt)}`;
      const response = await axios.get(apiUrl);

      if (response.data && response.data.image_url) {
        const imageUrl = response.data.image_url;

        // T√©l√©charger l'image depuis l'URL renvoy√©e
        const imageResponse = await axios({
          url: imageUrl,
          method: 'GET',
          responseType: 'stream',
        });

        // Sauvegarder temporairement l'image
        const tempFilePath = path.resolve(__dirname, 'generated_image.jpg');
        const writer = fs.createWriteStream(tempFilePath);
        imageResponse.data.pipe(writer);

        await new Promise((resolve, reject) => {
          writer.on('finish', resolve);
          writer.on('error', reject);
        });

        // Pr√©parer l'image pour l'envoi dans Messenger
        const formData = new FormData();
        formData.append('recipient', JSON.stringify({ id: senderId }));
        formData.append('message', JSON.stringify({
          attachment: {
            type: 'image',
            payload: {}
          }
        }));
        formData.append('filedata', fs.createReadStream(tempFilePath));

        // Envoyer l'image dans Messenger
        const fbResponse = await axios.post(
          `https://graph.facebook.com/v17.0/me/messages?access_token=${pageAccessToken}`,
          formData,
          { headers: formData.getHeaders() }
        );

        console.log('Image envoy√©e avec succ√®s:', fbResponse.data);

        // Supprimer le fichier temporaire
        fs.unlinkSync(tempFilePath);

        // Confirmer √† l'utilisateur
        await sendMessage(senderId, {
          text: "‚úÖ Votre image a √©t√© cr√©√©e et envoy√©e avec succ√®s ! üé®"
        }, pageAccessToken);

      } else {
        throw new Error("L'API n'a pas retourn√© d'URL d'image.");
      }

    } catch (error) {
      console.error('Erreur :', error.message);

      // Informer l'utilisateur en cas d'erreur
      await sendMessage(senderId, {
        text: "‚ùå Une erreur est survenue lors de la g√©n√©ration de l'image. D√©tails : " + error.message
      }, pageAccessToken);
    }
  },
};
