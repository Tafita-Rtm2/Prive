const axios = require('axios');

module.exports = {
  name: 'gemini-chat',
  description: 'Pose une question √† Gemini via l\'API fournie.',
  author: 'Deku (rest api)',
  async execute(senderId, args, pageAccessToken, sendMessage) {
    const prompt = args.join(' ');

    if (!prompt) {
      return sendMessage(senderId, { text: "‚ùå Veuillez entrer une question valide." }, pageAccessToken);
    }

    try {
      // Envoyer un message indiquant que Gemini est en train de r√©pondre
      await sendMessage(
        senderId,
        { text: 'üí¨ Gemini est en train de r√©fl√©chir √† ta question...‚è≥\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ' },
        pageAccessToken
      );

      // Construire l'URL de l'API
      const apiUrl = `https://api.kenliejugarap.com/blackbox-gemini/?text=${encodeURIComponent(prompt)}`;

      // Effectuer la requ√™te √† l'API
      const response = await axios.get(apiUrl);

      // V√©rifier que la r√©ponse contient le champ "response"
      const text = response.data.response; // La r√©ponse principale

      if (!text || typeof text !== 'string') {
        throw new Error('La r√©ponse de l\'API est invalide ou vide.');
      }

      // Formater la r√©ponse
      const formattedResponse = `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n‚ú® **Gemini**\n\n${text.trim()}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;

      // Envoyer la r√©ponse format√©e
      const maxMessageLength = 2000;
      if (formattedResponse.length > maxMessageLength) {
        const messages = splitMessageIntoChunks(formattedResponse, maxMessageLength);
        for (const message of messages) {
          await sendMessage(senderId, { text: message }, pageAccessToken);
        }
      } else {
        await sendMessage(senderId, { text: formattedResponse }, pageAccessToken);
      }

    } catch (error) {
      console.error('Erreur lors de l\'appel √† l\'API Gemini :', error.message);

      // Envoyer un message d'erreur en cas de probl√®me
      await sendMessage(
        senderId,
        { text: '‚ùå D√©sol√©, une erreur est survenue lors de l\'appel √† l\'API Gemini. Veuillez r√©essayer plus tard.' },
        pageAccessToken
      );
    }
  }
};

// Fonction pour d√©couper les messages longs
function splitMessageIntoChunks(message, chunkSize) {
  const chunks = [];
  for (let i = 0; i < message.length; i += chunkSize) {
    chunks.push(message.slice(i, i + chunkSize));
  }
  return chunks;
}
