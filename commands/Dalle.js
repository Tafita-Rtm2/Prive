const axios = require('axios');

const imageCache = {}; // Stock temporaire pour les images re√ßues

module.exports = {
  name: 'gpt4o-pro',
  description: 'Analyse une image ou r√©pond √† une question via l‚ÄôAPI Kaiz.',
  author: 'Kaiz Integration',

  async execute(senderId, args, attachments, pageAccessToken, sendMessage) {
    try {
      const prompt = args.join(' ').trim();

      // 1. Gestion des images re√ßues
      if (attachments && attachments.length > 0 && attachments[0].type === 'image') {
        const imageUrl = attachments[0].payload?.url; // Extraire l'URL de l'image
        if (!imageUrl) throw new Error("URL de l'image non trouv√©e.");

        // Stocker l'image dans le cache temporaire
        imageCache[senderId] = imageUrl;

        // Informer l'utilisateur que l'image a √©t√© re√ßue
        await sendMessage(
          senderId,
          { text: '‚úÖ Image re√ßue ! Que voulez-vous que je fasse avec cette image ? Envoyez-moi un texte explicatif.' },
          pageAccessToken
        );
        return;
      }

      // 2. V√©rification si l'utilisateur r√©pond apr√®s avoir envoy√© une image
      if (prompt && imageCache[senderId]) {
        const storedImageUrl = imageCache[senderId];
        delete imageCache[senderId]; // Supprimer l'image du cache apr√®s utilisation

        // Construire l'URL de l'API pour l'analyse de l'image avec le texte
        const apiUrl = `https://kaiz-apis.gleeze.com/api/gpt-4o-pro?imageUrl=${encodeURIComponent(storedImageUrl)}&q=${encodeURIComponent(prompt)}&uid=${encodeURIComponent(senderId)}`;

        // Informer l'utilisateur que l'analyse est en cours
        await sendMessage(
          senderId,
          { text: '‚è≥ Analyse de l‚Äôimage avec votre texte en cours. Veuillez patienter...' },
          pageAccessToken
        );

        // Appel √† l'API externe
        const response = await axios.get(apiUrl);
        const text = response.data?.response || "D√©sol√©, je n'ai pas pu obtenir une r√©ponse valide.";

        // Envoyer la r√©ponse finale
        const madagascarTime = getMadagascarTime();
        const finalResponse = `‚ú®Gpt4o pro\n\n${text}\nüïí ${madagascarTime}`;
        return sendMessage(senderId, { text: finalResponse }, pageAccessToken);
      }

      // 3. R√©pondre normalement si aucun cache d'image n'existe
      if (prompt) {
        const apiUrl = `https://kaiz-apis.gleeze.com/api/gpt-4o-pro?q=${encodeURIComponent(prompt)}&uid=${encodeURIComponent(senderId)}`;

        // Informer l'utilisateur que la r√©ponse est en cours de g√©n√©ration
        await sendMessage(
          senderId,
          { text: '‚è≥ Gpt4o pro est en train de r√©pondre. Veuillez patienter...' },
          pageAccessToken
        );

        // Appel √† l'API
        const response = await axios.get(apiUrl);
        const text = response.data?.response || "D√©sol√©, je n'ai pas pu obtenir une r√©ponse valide.";

        const madagascarTime = getMadagascarTime();
        const finalResponse = `‚ú®Gpt4o pro\n\n${text}\nüïí ${madagascarTime}`;
        return sendMessage(senderId, { text: finalResponse }, pageAccessToken);
      }

      // 4. Si ni texte ni image n'est fourni
      await sendMessage(
        senderId,
        { text: "‚ùå Veuillez envoyer une image ou poser une question pour commencer l'analyse." },
        pageAccessToken
      );
    } catch (error) {
      console.error("Erreur dans l'ex√©cution :", error.message);
      await sendMessage(
        senderId,
        { text: '‚ùå Une erreur est survenue. Veuillez r√©essayer plus tard.' },
        pageAccessToken
      );
    }
  }
};

// Fonction pour obtenir l'heure actuelle de Madagascar
function getMadagascarTime() {
  const options = { timeZone: 'Indian/Antananarivo', hour12: false };
  return new Date().toLocaleString('fr-FR', {
    ...options,
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
  });
}
